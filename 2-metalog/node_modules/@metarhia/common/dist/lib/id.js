'use strict';

var crypto = require('crypto');

var math = require('./math');

var _require = require('./strings'),
    ALPHA_DIGIT = _require.ALPHA_DIGIT; // Generate random key
//   length - <number>, key length
//   possible - <string>, with possible characters
// Returns: <string>, key


var generateKey = function generateKey(length, possible) {
  var base = possible.length;
  var key = '';

  for (var i = 0; i < length; i++) {
    var index = Math.floor(math.cryptoRandom() * base);
    key += possible[index];
  }

  return key;
}; // Generate file storage key
// Returns: <string[]>, [folder1, folder2, code]


var generateStorageKey = function generateStorageKey() {
  var folder1 = generateKey(2, ALPHA_DIGIT);
  var folder2 = generateKey(2, ALPHA_DIGIT);
  var code = generateKey(8, ALPHA_DIGIT);
  return [folder1, folder2, code];
};

var guidPrefetcher = math.cryptoPrefetcher(4096, 16); // Generate an RFC4122-compliant GUID (UUID v4)
// Returns: <string>, GUID

var generateGUID = function generateGUID() {
  var bytes = guidPrefetcher.next();
  bytes[6] &= 0x0f;
  bytes[6] |= 0x40;
  bytes[8] &= 0x3f;
  bytes[8] |= 0x80;
  return [bytes.toString('hex', 0, 4), bytes.toString('hex', 4, 6), bytes.toString('hex', 6, 8), bytes.toString('hex', 8, 10), bytes.toString('hex', 10, 16)].join('-');
}; // Calculate SID CRC
//   config - <Object>, { secret }
//   key - <string>, SID key
// Returns: <string>, CRC
// Deprecated: this method will be removed in the next major versions.
//     Use `crcToken()` instead.


var crcSID = function crcSID(config, key) {
  return crypto.createHash('md5').update(key + config.secret).digest('hex').substring(0, 4);
}; // Generate random SID
//   config - <Object>, { length, characters, secret }
// Returns: <string>, SID
// Deprecated: this method will be removed in the next major versions.
//     Use `generateToken()` instead.


var generateSID = function generateSID(config) {
  var key = generateKey(config.length - 4, config.characters);
  return key + crcSID(config, key);
}; // Validate SID
//   config - <Object>, { secret }
//   sid - <string>, session id
// Returns: <boolean>
// Deprecated: this method will be removed in the next major versions.
//     Use `validateToken()` instead.


var validateSID = function validateSID(config, sid) {
  if (!sid) return false;
  var crc = sid.substr(sid.length - 4);
  var key = sid.substr(0, sid.length - 4);
  return crcSID(config, key) === crc;
}; // Calculate Token crc
//   secret <string>
//   key <string>
// Returns: <string>, crc


var crcToken = function crcToken(secret, key) {
  return crypto.createHash('md5').update(key + secret).digest('hex').substring(0, 4);
}; // Generate random Token
//   secret <string>
//   characters <string>
//   length <number>
// Returns: <string>, token


var generateToken = function generateToken(secret, characters, length) {
  var key = generateKey(length - 4, characters);
  return key + crcToken(secret, key);
}; // Validate Token
//   secret <string>
//   token <string>
// Returns: <boolean>


var validateToken = function validateToken(secret, token) {
  if (!token) return false;
  var len = token.length;
  var crc = token.slice(len - 4);
  var key = token.slice(0, -4);
  return crcToken(secret, key) === crc;
}; // Calculate hash with salt
//   password - <string>
//   salt - <string>
// Returns: <string>, hash


var hash = function hash(password, salt) {
  return crypto.createHmac('sha512', salt).update(password).digest('hex');
}; // Validate hash
//   hashValue - <string>
//   password - <string>
//   salt - <string>
// Returns: <boolean>


var validateHash = function validateHash(hashValue, password, salt) {
  return hash(password, salt) === hashValue;
}; // Convert id to array of hex strings
//   id - <number>
// Returns: <Array>, minimal length is 2
//          which contains hex strings with length of 4


var idToChunks = function idToChunks(id) {
  var hex = id.toString(16);
  var remainder = hex.length % 4;

  if (remainder !== 0) {
    var pad = 4 - remainder;
    hex = new Array(pad + 1).join('0') + hex;
  }

  var count = hex.length / 4;

  if (count === 1) {
    hex = '0000' + hex;
    count++;
  }

  var chunks = new Array(count);

  for (var i = 0; i < count; i++) {
    var chunk = hex.substr((i + 1) * -4, 4);
    chunks[i] = chunk;
  }

  return chunks;
}; // Convert id to file path
//   id - <number>
// Returns: <string>


var idToPath = function idToPath(id) {
  var chunks = idToChunks(id);
  var path = chunks.join('/');
  return path;
}; // Convert file path to id
//   path - <string>
// Returns: <number>


var pathToId = function pathToId(path) {
  var chunks = path.split('/');
  var hex = '0x';

  for (var i = chunks.length - 1; i >= 0; i--) {
    hex += chunks[i];
  }

  return parseInt(hex, 16);
};

module.exports = {
  generateKey: generateKey,
  generateGUID: generateGUID,
  generateSID: generateSID,
  crcSID: crcSID,
  validateSID: validateSID,
  generateToken: generateToken,
  crcToken: crcToken,
  validateToken: validateToken,
  hash: hash,
  validateHash: validateHash,
  generateStorageKey: generateStorageKey,
  idToChunks: idToChunks,
  idToPath: idToPath,
  pathToId: pathToId
};