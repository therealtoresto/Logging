'use strict';

var fs = require('fs');

var path = require('path');

var MKDIRP_DEFAULT_MODE = 511;

var mkdir = function mkdir(dir, mode, cb) {
  fs.access(dir, fs.constants.F_OK, function (err) {
    if (err && err.code === 'ENOENT') {
      mkdir(path.dirname(dir), mode, function (err) {
        if (err) cb(err);else fs.mkdir(dir, mode, cb);
      });
    } else {
      cb(err);
    }
  });
};

var recursivelyListDirs = function recursivelyListDirs(dir) {
  var list = [dir];
  var nextDir = dir;
  var root = path.parse(dir).root || '.';

  while ((nextDir = path.dirname(nextDir)) !== root) {
    list.push(nextDir);
  }

  return list;
};

var rmdirp = function rmdirp(dir, cb) {
  var dirs = recursivelyListDirs(dir);
  var i = 0;
  rmNextDir();

  function rmNextDir() {
    fs.rmdir(dirs[i], function (err) {
      if (err) {
        cb(err);
        return;
      }

      if (++i === dirs.length) {
        cb();
      } else {
        rmNextDir();
      }
    });
  }
};

var mkdirp;
var version = process.versions.node.split('.').map(function (el) {
  return parseInt(el);
});

if (version[0] < 10 || version[0] === 10 && version[1] <= 11) {
  mkdirp = function mkdirp(dir, mode, cb) {
    if (typeof mode === 'function') {
      cb = mode;
      mode = MKDIRP_DEFAULT_MODE;
    }

    mkdir(dir, mode, cb);
  };
} else {
  mkdirp = function mkdirp(dir, mode, cb) {
    typeof mode === 'function' ? fs.mkdir(dir, {
      recursive: true
    }, mode) : fs.mkdir(dir, {
      recursive: true,
      mode: mode
    }, cb);
  };
}

module.exports = {
  mkdirp: mkdirp,
  rmdirp: rmdirp
};